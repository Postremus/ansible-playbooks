---
# Generates random uuid strings, which kan by used as keys by the service
- name: "Create random keys used by service"
  set_fact:
    random: "{'{{ item }}':'{{ 9999999999999999999999 | random | to_uuid }}'}"
  loop: "{{ service.random }}"
  when: service.random is defined

- name: "{{service.name}} - Create directory for service definitions"
  file:
    path: "{{ docker_service_dir }}/{{env.stack}}/{{ service.name }}"
    state: directory

- name: "{{service.name}} - Copy service definition to remote"
  template:
    src: "files/{{ service.template_name | default('common-traefik-app') }}.j2"
    dest: "{{ docker_service_dir }}/{{env.stack}}/{{ service.name }}/{{ service.name }}.yml"

- name: "{{service.name}} - Copy additional configuration files to remote"
  copy:
    src: "files/{{ file.name }}"
    dest: "{{ docker_service_dir }}/{{env.stack}}/{{ service.name }}/{{ file.name | basename }}"
    force: "{{ file.overwrite }}"
    mode: "{{ file.mode | default('0644') }}"
  when: "service.files is defined"
  loop: "{{ service.files }}"
  loop_control:
    loop_var: "file"

- name: "Create needed networks"
  docker_network:
    name: "{{ network.name }}"
    driver: "{{ network.driver }}"
  when: "service.networks is defined"
  loop: "{{ service.networks }}"
  loop_control:
    loop_var: "network"

- name: "{{service.name}} - Update Service"
  shell: docker stack deploy -c "{{ docker_service_dir }}"/"{{env.stack}}"/"{{ service.name }}"/"{{ service.name }}".yml "{{ env.stack }}" --resolve-image always