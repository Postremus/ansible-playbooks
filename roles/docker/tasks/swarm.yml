---
- name: Figure out if any of the intended swarm managers is already an active manager
  shell: "docker info --format '{{ '{{' }} json .Swarm.LocalNodeState {{ '}}' }}'"
  register: local_node_state
  when: "'docker-swarm-manager' in group_names"

- name: Get active manager node
  set_fact:
    active_manager_node: "{{ inventory_hostname }}"
  when: "'docker-swarm-manager' in group_names and
          local_node_state.stdout == '\"active\"' and
          groups['docker-swarm-manager'][0]['active_manager_node'] is undefined"
  delegate_to: "{{groups['docker-swarm-manager'][0]}}"
  delegate_facts: true

- name: Init swarm, if no manager node was found
  shell: |
    docker swarm init --advertise-addr {{swarm.advertise_addr}}
  when: "hostvars[groups['docker-swarm-manager'][0]]['active_manager_node'] is undefined and
         'docker-swarm-manager' in group_names"
  run_once: true

- name: Get now active manager node
  set_fact:
    active_manager_node: "{{ inventory_hostname }}"
  when: "'docker-swarm-manager' in group_names and
          local_node_state.stdout == '\"active\"' and
          hostvars[groups['docker-swarm-manager'][0]]['active_manager_node'] is undefined"
  delegate_to: "{{groups['docker-swarm-manager'][0]}}"
  delegate_facts: true

- name: Get Swarm manager join token
  shell: docker swarm join-token --rotate manager
  register: join_manager_token
  delegate_to: "{{ hostvars[groups['docker-swarm-manager'][0]]['active_manager_node'] }}"
  delegate_facts: true
  run_once: true

- name: Force other potential managers to be my 'friends'
  shell: "{{ hostvars[hostvars[groups['docker-swarm-manager'][0]]['active_manager_node']].join_manager_token.stdout_lines[4] }}"
  when: "'docker-swarm-manager' in group_names and
         local_node_state.stdout == '\"inactive\"'"

- name: Get Swarm worker join token
  shell: docker swarm join-token --rotate worker
  register: join_worker_token
  delegate_to: "{{ hostvars[groups['docker-swarm-manager'][0]]['active_manager_node'] }}"
  delegate_facts: true
  run_once: true

- name: Force workers to be my servants
  shell: "{{ hostvars[hostvars[groups['docker-swarm-manager'][0]]['active_manager_node']].join_worker_token.stdout_lines[4] }} || true"
  when: "'docker-swarm-worker' in group_names"
  ignore_errors: yes